module mux8to1(
    input wire [7:0] in,   // 8 inputs: in[0] to in[7]
    input wire [2:0] sel,  // 3-bit select signal to choose one of the 8 inputs
    output wire out        // Output
);
    wire [3:0] mux2to1_out1, mux2to1_out2;

    // First stage of 2-to-1 MUXs
    mux2to1 mux1_0 (
        .a(in[0]),
        .b(in[1]),
        .sel(sel[0]),
        .out(mux2to1_out1[0])
    );
    
    mux2to1 mux1_1 (
        .a(in[2]),
        .b(in[3]),
        .sel(sel[0]),
        .out(mux2to1_out1[1])
    );
    
    mux2to1 mux1_2 (
        .a(in[4]),
        .b(in[5]),
        .sel(sel[0]),
        .out(mux2to1_out1[2])
    );
    
    mux2to1 mux1_3 (
        .a(in[6]),
        .b(in[7]),
        .sel(sel[0]),
        .out(mux2to1_out1[3])
    );

    // Second stage of 2-to-1 MUXs
    mux2to1 mux2_0 (
        .a(mux2to1_out1[0]),
        .b(mux2to1_out1[1]),
        .sel(sel[1]),
        .out(mux2to1_out2[0])
    );
    
    mux2to1 mux2_1 (
        .a(mux2to1_out1[2]),
        .b(mux2to1_out1[3]),
        .sel(sel[1]),
        .out(mux2to1_out2[1])
    );

    // Third stage of 2-to-1 MUX
    mux2to1 mux3 (
        .a(mux2to1_out2[0]),
        .b(mux2to1_out2[1]),
        .sel(sel[2]),
        .out(out)
    );
endmodule

module mux2to1(
    input wire a,       // Input 0
    input wire b,       // Input 1
    input wire sel,     // Select signal
    output wire out     // Output
);
    assign out = (sel) ? b : a; // If sel is 1, output b; otherwise, output a
endmodule
