module full_adder (
    input A, B, Cin,
    output Sum, Cout
);
    // Sum output 
    assign Sum = A ^ B ^ Cin;   // Sum = A XOR B XOR Cin
    
    // Carry output 
    assign Cout = (A & B) | (B & Cin) | (Cin & A);  // Cout = AB + BC + CA
endmodule

module ripple_carry_adder_8bit (
    input [7:0] A, B,       // 8-bit inputs A and B
    input Cin,              // Carry-in input
    output [7:0] Sum,       // 8-bit sum output
    output Cout             // Carry-out output
);
    // Internal wires for carry 
    wire c1, c2, c3, c4, c5, c6, c7;
    
    // Instantiation of full adders for each bit position
    full_adder FA0 (.A(A[0]), .B(B[0]), .Cin(Cin), .Sum(Sum[0]), .Cout(c1));
    full_adder FA1 (.A(A[1]), .B(B[1]), .Cin(c1), .Sum(Sum[1]), .Cout(c2));
    full_adder FA2 (.A(A[2]), .B(B[2]), .Cin(c2), .Sum(Sum[2]), .Cout(c3));
    full_adder FA3 (.A(A[3]), .B(B[3]), .Cin(c3), .Sum(Sum[3]), .Cout(c4));
    full_adder FA4 (.A(A[4]), .B(B[4]), .Cin(c4), .Sum(Sum[4]), .Cout(c5));
    full_adder FA5 (.A(A[5]), .B(B[5]), .Cin(c5), .Sum(Sum[5]), .Cout(c6));
    full_adder FA6 (.A(A[6]), .B(B[6]), .Cin(c6), .Sum(Sum[6]), .Cout(c7));
    full_adder FA7 (.A(A[7]), .B(B[7]), .Cin(c7), .Sum(Sum[7]), .Cout(Cout));
endmodule
