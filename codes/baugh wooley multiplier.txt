module b_w (
    input [7:0] a,      // 8-bit input A
    input [7:0] b,      // 8-bit input B
    output [15:0] p     // 16-bit product output
);
    wire [7:0] p_p[7:0];    // Partial products
    wire [15:0] sum[7:0];   // Summation of partial products
    wire [15:0] carry[7:0]; // Carry bits
    
    // Generate partial products
    genvar i, j;
    generate
        for (i = 0; i < 8; i = i + 1) begin : p_p_g
            for (j = 0; j < 8; j = j + 1) begin : bit_mu
                assign p_p[i][j] = a[j] & b[i]; // Generate each bit of partial product
            end
        end
    endgenerate
    
    // Initialize first sum and carry
    assign sum[0] = {8'b0, p_p[0]}; // First sum is concatenation of 8'b0 and p_p[0]
    assign carry[0] = 16'b0;         // Initial carry is 16 bits of 0
    
    // Generate remaining sums and carries
    generate
        for (i = 1; i < 8; i = i + 1) begin : add_gen
            b_w_a u_a (
                .a({sum[i-1][15:8], p_p[i]}), // Concatenate higher 8 bits of previous sum with current partial product
                .b(sum[i-1] << 1),            // Shift left previous sum for addition
                .cin(carry[i-1]),             // Input carry from previous stage
                .sum(sum[i]),                 // Output sum for current stage
                .cout(carry[i])               // Output carry for current stage
            );
        end
    endgenerate
    
    // Final product is in sum[7]
    assign p = sum[7]; // Output the final 16-bit product
endmodule

module b_w_a (
    input [15:0] a,       // 16-bit input A
    input [15:0] b,       // 16-bit input B
    input [15:0] cin,     // Carry-in input
    output [15:0] sum,    // Sum output
    output [15:0] cout    // Carry-out output
);
    assign {cout, sum} = a + b + cin; // Full adder calculation for sum and carry
endmodule
